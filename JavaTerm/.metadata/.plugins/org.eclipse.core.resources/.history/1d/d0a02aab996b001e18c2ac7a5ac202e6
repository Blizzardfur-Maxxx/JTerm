package com.blizzardfur.jterm;

import javax.swing.*;
import java.io.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.SwingWorker;

public class JTerm extends JFrame {
    private JTextArea textArea;
    private JTextField commandInput;
    private PrintStream systemOut;
    private JButton killButton; // Added Kill button
    private Process runningProcess; // Added reference to the running process

    public JTerm() {
        setTitle("JTerm");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        textArea = new JTextArea();
        textArea.setEditable(false);
        textArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
        textArea.setBackground(Color.DARK_GRAY);
        textArea.setForeground(Color.GREEN);

        JScrollPane scrollPane = new JScrollPane(textArea);
        add(scrollPane);

        commandInput = new JTextField();
        commandInput.addActionListener(new CommandListener());
        commandInput.setForeground(Color.GREEN);
        commandInput.setBackground(Color.DARK_GRAY);

        add(commandInput, BorderLayout.SOUTH);

        systemOut = System.out;

        System.setOut(new PrintStream(new ConsoleAndSwingOutputStream()));
        System.out.println("Welcome To JTerm :3");

        // Create and add the "Kill" button
        killButton = new JButton("Kill");
        killButton.setForeground(Color.RED);
        killButton.setBackground(Color.DARK_GRAY);
        killButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (runningProcess != null) {
                    runningProcess.destroy();
                }
            }
        });
        add(killButton, BorderLayout.EAST);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.setOut(systemOut);
            }
        });
    }

    class CommandListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String command = commandInput.getText();
            if ("clear".equals(command.toLowerCase())) {
                textArea.setText(""); // Clear the text area
            } else {
                executeSystemCommand(command);
            }
            commandInput.setText("");
        }
    }

    private void executeSystemCommand(String command) {
        SwingWorker<Void, String> worker = new SwingWorker<Void, String>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    runningProcess = Runtime.getRuntime().exec(command);

                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(runningProcess.getInputStream()))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            publish(line);
                            // Log to the system console
                            System.out.println(line);
                        }
                    }
                    runningProcess.waitFor();
                } catch (IOException | InterruptedException e) {
                    publish("Error executing the command: " + e.getMessage());
                    // Log to the system console
                    System.out.println("Error executing the command: " + e.getMessage());
                }
                return null;
            }

            @Override
            protected void process(java.util.List<String> chunks) {
                for (String chunk : chunks) {
                    textArea.append(chunk + "\n");
                }
            }

            @Override
            protected void done() {
                commandInput.setText("");
                runningProcess = null; // Clear the running process reference
            }
        };

        worker.execute();
    }

    class ConsoleAndSwingOutputStream extends OutputStream {
        @Override
        public void write(int b) throws IOException {
            textArea.append(String.valueOf((char) b));
            textArea.setCaretPosition(textArea.getDocument().getLength());
            systemOut.write(b);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JTerm runner = new JTerm();
            runner.setVisible(true);
        });
    }
}
